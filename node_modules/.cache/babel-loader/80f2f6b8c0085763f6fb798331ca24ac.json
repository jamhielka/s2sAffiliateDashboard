{"remainingRequest":"D:\\JK2L2\\BUCKET\\s2sTracker\\node_modules\\babel-loader\\lib\\index.js!D:\\JK2L2\\BUCKET\\s2sTracker\\node_modules\\vuetify\\lib\\components\\VCalendar\\modes\\stack.js","dependencies":[{"path":"D:\\JK2L2\\BUCKET\\s2sTracker\\node_modules\\vuetify\\lib\\components\\VCalendar\\modes\\stack.js","mtime":1648193569880},{"path":"D:\\JK2L2\\BUCKET\\s2sTracker\\babel.config.js","mtime":1648769491690},{"path":"D:\\JK2L2\\BUCKET\\s2sTracker\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648193571030},{"path":"D:\\JK2L2\\BUCKET\\s2sTracker\\node_modules\\babel-loader\\lib\\index.js","mtime":1648193571283}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":"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","names":["getOverlapGroupHandler","getVisuals","hasOverlap","getNormalizedRange","getTimestampIdentifier","FULL_WIDTH","DEFAULT_OFFSET","WIDTH_MULTIPLIER","stack","events","firstWeekday","overlapThreshold","handler","day","dayEvents","timed","reset","dayStart","visuals","groups","getGroups","group","nodes","visual","child","getNode","index","getNextIndex","parent","getParent","sibling","start","end","addTime","children","push","getOverlappingRange","length","grand","grandNext","calculateBounds","sort","a","b","left","event","startTimestampIdentifier","node","columns","getMaxChildIndex","spaceLeft","spaceWidth","offset","Math","min","columnWidthMultiplier","getColumnWidthMultiplier","columnOffset","columnWidth","width","hasFullWidth","maxColumn","minColumn","reduce","c","getOverlappingIndices","indices","other","i","indexMin","indexMax","returnFirstColumn","overlapping","first","n","filter","added","max","childMax","identifier","minutes","removeMinutes","totalMinutes","addHours","floor","addMinutes"],"sourceRoot":"","sources":["../../../../src/components/VCalendar/modes/stack.ts"],"sourcesContent":["import { CalendarEventOverlapMode, CalendarEventVisual } from 'vuetify/types'\nimport { getOverlapGroupHandler, getVisuals, hasOverlap, getNormalizedRange } from './common'\nimport { getTimestampIdentifier } from '../util/timestamp'\n\ninterface Group {\n  start: number\n  end: number\n  visuals: CalendarEventVisual[]\n}\n\ninterface Node {\n  parent: Node | null\n  sibling: boolean\n  index: number\n  visual: CalendarEventVisual\n  start: number\n  end: number\n  children: Node[]\n}\n\nconst FULL_WIDTH = 100\n\nconst DEFAULT_OFFSET = 5\n\nconst WIDTH_MULTIPLIER = 1.7\n\n/**\n * Variation of column mode where events can be stacked. The priority of this\n * mode is to stack events together taking up the least amount of space while\n * trying to ensure the content of the event is always visible as well as its\n * start and end. A sibling column has intersecting event content and must be\n * placed beside each other. Non-sibling columns are offset by 5% from the\n * previous column. The width is scaled by 1.7 so the events overlap and\n * whitespace is reduced. If there is a hole in columns the event width is\n * scaled up so it intersects with the next column. The columns have equal\n * width in the space they are given. If the event doesn't have any to the\n * right of it that intersect with it's content it's right side is extended\n * to the right side.\n */\n\nexport const stack: CalendarEventOverlapMode = (events, firstWeekday, overlapThreshold) => {\n  const handler = getOverlapGroupHandler(firstWeekday)\n\n  // eslint-disable-next-line max-statements\n  return (day, dayEvents, timed, reset) => {\n    if (!timed) {\n      return handler.getVisuals(day, dayEvents, timed, reset)\n    }\n\n    const dayStart = getTimestampIdentifier(day)\n    const visuals = getVisuals(dayEvents, dayStart)\n    const groups = getGroups(visuals, dayStart)\n\n    for (const group of groups) {\n      const nodes: Node[] = []\n\n      for (const visual of group.visuals) {\n        const child = getNode(visual, dayStart)\n        const index = getNextIndex(child, nodes)\n\n        if (index === false) {\n          const parent = getParent(child, nodes)\n          if (parent) {\n            child.parent = parent\n            child.sibling = hasOverlap(child.start, child.end, parent.start, addTime(parent.start, overlapThreshold))\n            child.index = parent.index + 1\n            parent.children.push(child)\n          }\n        } else {\n          const [parent] = getOverlappingRange(child, nodes, index - 1, index - 1)\n          const children = getOverlappingRange(child, nodes, index + 1, index + nodes.length, true)\n\n          child.children = children\n          child.index = index\n\n          if (parent) {\n            child.parent = parent\n            child.sibling = hasOverlap(child.start, child.end, parent.start, addTime(parent.start, overlapThreshold))\n            parent.children.push(child)\n          }\n\n          for (const grand of children) {\n            if (grand.parent === parent) {\n              grand.parent = child\n            }\n\n            const grandNext = grand.index - child.index <= 1\n            if (grandNext && child.sibling &&\n              hasOverlap(child.start, addTime(child.start, overlapThreshold), grand.start, grand.end)) {\n              grand.sibling = true\n            }\n          }\n        }\n\n        nodes.push(child)\n      }\n\n      calculateBounds(nodes, overlapThreshold)\n    }\n\n    visuals.sort((a, b) => (a.left - b.left) || (a.event.startTimestampIdentifier - b.event.startTimestampIdentifier))\n\n    return visuals\n  }\n}\n\nfunction calculateBounds (nodes: Node[], overlapThreshold: number) {\n  for (const node of nodes) {\n    const { visual, parent } = node\n    const columns = getMaxChildIndex(node) + 1\n    const spaceLeft = parent ? parent.visual.left : 0\n    const spaceWidth = FULL_WIDTH - spaceLeft\n    const offset = Math.min(DEFAULT_OFFSET, FULL_WIDTH / columns)\n    const columnWidthMultiplier = getColumnWidthMultiplier(node, nodes)\n    const columnOffset = spaceWidth / (columns - node.index + 1)\n    const columnWidth = spaceWidth / (columns - node.index + (node.sibling ? 1 : 0)) * columnWidthMultiplier\n\n    if (parent) {\n      visual.left = node.sibling\n        ? spaceLeft + columnOffset\n        : spaceLeft + offset\n    }\n\n    visual.width = hasFullWidth(node, nodes, overlapThreshold)\n      ? FULL_WIDTH - visual.left\n      : Math.min(FULL_WIDTH - visual.left, columnWidth * WIDTH_MULTIPLIER)\n  }\n}\n\nfunction getColumnWidthMultiplier (node: Node, nodes: Node[]): number {\n  if (!node.children.length) {\n    return 1\n  }\n\n  const maxColumn = node.index + nodes.length\n  const minColumn = node.children.reduce((min, c) => Math.min(min, c.index), maxColumn)\n\n  return minColumn - node.index\n}\n\nfunction getOverlappingIndices (node: Node, nodes: Node[]): number[] {\n  const indices: number[] = []\n  for (const other of nodes) {\n    if (hasOverlap(node.start, node.end, other.start, other.end)) {\n      indices.push(other.index)\n    }\n  }\n  return indices\n}\n\nfunction getNextIndex (node: Node, nodes: Node[]): number | false {\n  const indices = getOverlappingIndices(node, nodes)\n  indices.sort()\n\n  for (let i = 0; i < indices.length; i++) {\n    if (i < indices[i]) {\n      return i\n    }\n  }\n  return false\n}\n\nfunction getOverlappingRange (node: Node, nodes: Node[], indexMin: number, indexMax: number, returnFirstColumn = false): Node[] {\n  const overlapping: Node[] = []\n  for (const other of nodes) {\n    if (other.index >= indexMin && other.index <= indexMax && hasOverlap(node.start, node.end, other.start, other.end)) {\n      overlapping.push(other)\n    }\n  }\n  if (returnFirstColumn && overlapping.length > 0) {\n    const first = overlapping.reduce((min, n) => Math.min(min, n.index), overlapping[0].index)\n    return overlapping.filter(n => n.index === first)\n  }\n  return overlapping\n}\n\nfunction getParent (node: Node, nodes: Node[]): Node | null {\n  let parent: Node | null = null\n  for (const other of nodes) {\n    if (hasOverlap(node.start, node.end, other.start, other.end) && (parent === null || other.index > parent.index)) {\n      parent = other\n    }\n  }\n  return parent\n}\n\nfunction hasFullWidth (node: Node, nodes: Node[], overlapThreshold: number): boolean {\n  for (const other of nodes) {\n    if (other !== node &&\n      other.index > node.index &&\n      hasOverlap(node.start, addTime(node.start, overlapThreshold), other.start, other.end)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction getGroups (visuals: CalendarEventVisual[], dayStart: number): Group[] {\n  const groups: Group[] = []\n\n  for (const visual of visuals) {\n    const [start, end] = getNormalizedRange(visual.event, dayStart)\n    let added = false\n\n    for (const group of groups) {\n      if (hasOverlap(start, end, group.start, group.end)) {\n        group.visuals.push(visual)\n        group.end = Math.max(group.end, end)\n        added = true\n        break\n      }\n    }\n\n    if (!added) {\n      groups.push({ start, end, visuals: [visual] })\n    }\n  }\n\n  return groups\n}\n\nfunction getNode (visual: CalendarEventVisual, dayStart: number): Node {\n  const [start, end] = getNormalizedRange(visual.event, dayStart)\n\n  return {\n    parent: null,\n    sibling: true,\n    index: 0,\n    visual,\n    start,\n    end,\n    children: [],\n  }\n}\n\nfunction getMaxChildIndex (node: Node): number {\n  let max = node.index\n  for (const child of node.children) {\n    const childMax = getMaxChildIndex(child)\n    if (childMax > max) {\n      max = childMax\n    }\n  }\n  return max\n}\n\nfunction addTime (identifier: number, minutes: number): number {\n  const removeMinutes = identifier % 100\n  const totalMinutes = removeMinutes + minutes\n  const addHours = Math.floor(totalMinutes / 60)\n  const addMinutes = totalMinutes % 60\n\n  return identifier - removeMinutes + addHours * 100 + addMinutes\n}\n"]}]}