{"remainingRequest":"D:\\JK2L2\\BUCKET\\s2sTracker\\node_modules\\babel-loader\\lib\\index.js!D:\\JK2L2\\BUCKET\\s2sTracker\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\JK2L2\\BUCKET\\s2sTracker\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\JK2L2\\BUCKET\\s2sTracker\\node_modules\\vue2-timepicker\\src\\vue-timepicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\JK2L2\\BUCKET\\s2sTracker\\node_modules\\vue2-timepicker\\src\\vue-timepicker.vue","mtime":1648767944082},{"path":"D:\\JK2L2\\BUCKET\\s2sTracker\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648193571030},{"path":"D:\\JK2L2\\BUCKET\\s2sTracker\\node_modules\\babel-loader\\lib\\index.js","mtime":1648193571283},{"path":"D:\\JK2L2\\BUCKET\\s2sTracker\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648193571030},{"path":"D:\\JK2L2\\BUCKET\\s2sTracker\\node_modules\\vue-loader\\lib\\index.js","mtime":1648193599351}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["vue-timepicker.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\nconst CONFIG = {\n  HOUR_TOKENS: ['HH', 'H', 'hh', 'h', 'kk', 'k'],\n  MINUTE_TOKENS: ['mm', 'm'],\n  SECOND_TOKENS: ['ss', 's'],\n  APM_TOKENS: ['A', 'a'],\n  BASIC_TYPES: ['hour', 'minute', 'second', 'apm']\n}\n\nconst DEFAULT_OPTIONS = {\n  format: 'HH:mm',\n  minuteInterval: 1,\n  secondInterval: 1,\n  hourRange: null,\n  minuteRange: null,\n  secondRange: null,\n  hideDisabledHours: false,\n  hideDisabledMinutes: false,\n  hideDisabledSeconds: false,\n  hideDisabledItems: false,\n  hideDropdown: false,\n  blurDelay: 300,\n  manualInputTimeout: 1000,\n  dropOffsetHeight: 160\n}\n\nexport default {\n  name: 'VueTimepicker',\n  props: {\n    value: { type: [ Object, String ] },\n    format: { type: String },\n    minuteInterval: { type: [ Number, String ] },\n    secondInterval: { type: [ Number, String ] },\n\n    hourRange: { type: Array },\n    minuteRange: { type: Array },\n    secondRange: { type: Array },\n\n    hideDisabledHours: { type: Boolean, default: false },\n    hideDisabledMinutes: { type: Boolean, default: false },\n    hideDisabledSeconds: { type: Boolean, default: false },\n    hideDisabledItems: { type: Boolean, default: false },\n\n    hideClearButton: { type: Boolean, default: false },\n    disabled: { type: Boolean, default: false },\n    closeOnComplete: { type: Boolean, default: false },\n\n    id: { type: String },\n    name: { type: String },\n    inputClass: { type: [ String, Object, Array ] },\n    placeholder: { type: String },\n    tabindex: { type: [ Number, String ], default: 0 },\n    inputWidth: { type: String },\n    autocomplete: { type: String, default: 'off' },\n\n    hourLabel: { type: String },\n    minuteLabel: { type: String },\n    secondLabel: { type: String },\n    apmLabel: { type: String },\n    amText: { type: String },\n    pmText: { type: String },\n\n    blurDelay: { type: [ Number, String ] },\n    advancedKeyboard: { type: Boolean, default: false },\n\n    lazy: { type: Boolean, default: false },\n    autoScroll: { type: Boolean, default: false },\n\n    dropDirection: { type: String, default: 'down' },\n    dropOffsetHeight: { type: [ Number, String ] },\n    containerId: { type: String },\n    appendToBody: { type: Boolean, default: false },\n\n    manualInput: { type: Boolean, default: false },\n    manualInputTimeout: { type: [ Number, String ] },\n    hideDropdown: { type: Boolean, default: false },\n    fixedDropdownButton: { type: Boolean, default: false },\n\n    debugMode: { type: Boolean, default: false }\n  },\n\n  data () {\n    return {\n      timeValue: {},\n\n      hours: [],\n      minutes: [],\n      seconds: [],\n      apms: [],\n\n      isActive: false,\n      showDropdown: false,\n      isFocusing: false,\n      debounceTimer: undefined,\n\n      hourType: 'HH',\n      minuteType: 'mm',\n      secondType: '',\n      apmType: '',\n      hour: '',\n      minute: '',\n      second: '',\n      apm: '',\n      fullValues: undefined,\n      bakDisplayTime: undefined,\n      doClearApmChecking: false,\n\n      selectionTimer: undefined,\n      kbInputTimer: undefined,\n      kbInputLog: '',\n      bakCurrentPos: undefined,\n      forceDropOnTop: false\n    }\n  },\n\n  computed: {\n    opts () {\n      const options = Object.assign({}, DEFAULT_OPTIONS)\n\n      if (this.format && this.format.length) {\n        options.format = String(this.format)\n      }\n\n      if (this.isNumber(this.minuteInterval)) {\n        options.minuteInterval = +this.minuteInterval\n      }\n      // minuteInterval failsafe\n      if (!options.minuteInterval || options.minuteInterval < 1 || options.minuteInterval > 60) {\n        if (this.debugMode) {\n          if (options.minuteInterval > 60) {\n            this.debugLog(`\"minute-interval\" should be less than 60. Current value is ${this.minuteInterval}`)\n          } else if (options.minuteInterval === 0 || options.minuteInterval < 1) {\n            this.debugLog(`\"minute-interval\" should be NO less than 1. Current value is ${this.minuteInterval}`)\n          }\n        }\n        if (options.minuteInterval === 0) {\n          options.minuteInterval = 60\n        } else {\n          options.minuteInterval = 1\n        }\n      }\n\n      if (this.isNumber(this.secondInterval)) {\n        options.secondInterval = +this.secondInterval\n      }\n      // secondInterval failsafe\n      if (!options.secondInterval || options.secondInterval < 1 || options.secondInterval > 60) {\n        if (this.debugMode) {\n          if (options.secondInterval > 60) {\n            this.debugLog(`\"second-interval\" should be less than 60. Current value is ${this.secondInterval}`)\n          } else if (options.secondInterval === 0 || options.secondInterval < 1) {\n            this.debugLog(`\"second-interval\" should be NO less than 1. Current value is ${this.secondInterval}`)\n          }\n        }\n        if (options.secondInterval === 0) {\n          options.secondInterval = 60\n        } else {\n          options.secondInterval = 1\n        }\n      }\n\n      if (this.hourRange && Array.isArray(this.hourRange)) {\n        options.hourRange = JSON.parse(JSON.stringify(this.hourRange))\n        if (!this.hourRange.length && this.debugMode) {\n          this.debugLog('The \"hour-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.minuteRange && Array.isArray(this.minuteRange)) {\n        options.minuteRange = JSON.parse(JSON.stringify(this.minuteRange))\n        if (!this.minuteRange.length && this.debugMode) {\n          this.debugLog('The \"minute-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.secondRange && Array.isArray(this.secondRange)) {\n        options.secondRange = JSON.parse(JSON.stringify(this.secondRange))\n        if (!this.secondRange.length && this.debugMode) {\n          this.debugLog('The \"second-range\" array is empty (length === 0)')\n        }\n      }\n\n      if (this.hideDisabledItems) {\n        options.hideDisabledItems = true\n      }\n\n      if (this.hideDisabledHours || this.hideDisabledItems) {\n        options.hideDisabledHours = true\n      }\n      if (this.hideDisabledMinutes || this.hideDisabledItems) {\n        options.hideDisabledMinutes = true\n      }\n      if (this.hideDisabledSeconds || this.hideDisabledItems) {\n        options.hideDisabledSeconds = true\n      }\n\n      if (this.hideDropdown) {\n        if (this.manualInput) {\n          options.hideDropdown = true\n        } else if (this.debugMode) {\n          this.debugLog('\"hide-dropdown\" only works with \"manual-input\" mode')\n        }\n      }\n\n      if (this.blurDelay && +this.blurDelay > 0) {\n        options.blurDelay = +this.blurDelay\n      }\n\n      if (this.manualInputTimeout && +this.manualInputTimeout > 0) {\n        options.manualInputTimeout = +this.manualInputTimeout\n      }\n\n      if (this.dropOffsetHeight && +this.dropOffsetHeight > 0) {\n        options.dropOffsetHeight = +this.dropOffsetHeight\n      }\n\n      return options\n    },\n\n    useStringValue () {\n      return typeof this.value === 'string'\n    },\n\n    formatString () {\n      return this.opts.format || DEFAULT_OPTIONS.format\n    },\n\n    inUse () {\n      const typesInUse = CONFIG.BASIC_TYPES.filter(type => this.getTokenByType(type))\n      // Sort types and tokens by their sequence in the \"format\" string\n      typesInUse.sort((l, r) => {\n        return this.formatString.indexOf(this.getTokenByType(l) || null) - this.formatString.indexOf(this.getTokenByType(r) || null)\n      })\n      const tokensInUse = typesInUse.map(type => this.getTokenByType(type))\n      return {\n        hour: !!this.hourType,\n        minute: !!this.minuteType,\n        second: !!this.secondType,\n        apm: !!this.apmType,\n        types: typesInUse || [],\n        tokens: tokensInUse || []\n      }\n    },\n\n    displayTime () {\n      let formatString = String(this.formatString)\n      if (this.hour) {\n        formatString = formatString.replace(new RegExp(this.hourType, 'g'), this.hour)\n      }\n      if (this.minute) {\n        formatString = formatString.replace(new RegExp(this.minuteType, 'g'), this.minute)\n      }\n      if (this.second && this.secondType) {\n        formatString = formatString.replace(new RegExp(this.secondType, 'g'), this.second)\n      }\n      if (this.apm && this.apmType) {\n        formatString = formatString.replace(new RegExp(this.apmType, 'g'), this.apm)\n      }\n      return formatString\n    },\n\n    customDisplayTime () {\n      if (!this.amText && !this.pmText) {\n        return this.displayTime\n      }\n      return this.displayTime.replace(new RegExp(this.apm, 'g'), this.apmDisplayText(this.apm))\n    },\n\n    inputIsEmpty () {\n      return this.formatString === this.displayTime\n    },\n\n    allValueSelected () {\n      if (\n        (this.inUse.hour && !this.hour) ||\n        (this.inUse.minute && !this.minute) ||\n        (this.inUse.second && !this.second) ||\n        (this.inUse.apm && !this.apm)\n      ) {\n        return false\n      }\n      return true\n    },\n\n    columnsSequence () {\n      return this.inUse.types.map(type => type) || []\n    },\n\n    showClearBtn () {\n      if (this.hideClearButton || this.disabled) {\n        return false\n      }\n      return !this.inputIsEmpty\n    },\n\n    showDropdownBtn () {\n      if (this.fixedDropdownButton) { return true }\n      if (this.opts.hideDropdown && this.isActive && !this.showDropdown) {\n        return true\n      }\n      return false\n    },\n\n    baseOn12Hours () {\n      return this.hourType === 'h' || this.hourType === 'hh'\n    },\n\n    hourRangeIn24HrFormat () {\n      if (!this.hourType || !this.opts.hourRange) { return false }\n      if (!this.opts.hourRange.length) { return [] }\n\n      const range = []\n      this.opts.hourRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"hour-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`)\n          }\n\n          let start = value[0]\n          let end = value[1] || value[0]\n\n          if (this.is12hRange(start)) {\n            start = this.translate12hRange(start)\n          }\n          if (this.is12hRange(end)) {\n            end = this.translate12hRange(end)\n          }\n\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 24) { continue }\n            if (!range.includes(i)) {\n              range.push(i)\n            }\n          }\n        } else {\n          if (this.is12hRange(value)) {\n            value = this.translate12hRange(value)\n          } else {\n            value = +value\n          }\n          if (value < 0 || value > 24) { return }\n          if (!range.includes(value)) {\n            range.push(value)\n          }\n        }\n      })\n      range.sort((l, r) => { return l - r })\n      return range\n    },\n\n    restrictedHourRange () {\n      // No restriction\n      if (!this.hourRangeIn24HrFormat) { return false }\n      // 12-Hour\n      if (this.baseOn12Hours) {\n        const range = this.hourRangeIn24HrFormat.map((value) => {\n          if (value === 12) {\n            return '12p'\n          } else if (value === 24 || value === 0) {\n            return '12a'\n          }\n          return value > 12 ? `${value % 12}p` : `${value}a`\n        })\n        return range\n      }\n      // 24-Hour\n      return this.hourRangeIn24HrFormat\n    },\n\n    validHoursList () {\n      if (!this.manualInput) { return false }\n      if (this.restrictedHourRange) {\n        let list = []\n        if (this.baseOn12Hours) {\n          list = this.restrictedHourRange.map(hr => {\n            const l = hr.substr(0, hr.length - 1)\n            const r = hr.substr(-1)\n            return `${this.formatValue(this.hourType, l)}${r}`\n          })\n          const am12Index = list.indexOf('12a')\n          if (am12Index > 0) {\n            // Make '12a' the first item in h/hh\n            list.unshift(list.splice(am12Index, 1)[0])\n          }\n          return list\n        }\n        list = this.restrictedHourRange.map(hr => {\n          return this.formatValue(this.hourType, hr)\n        })\n        if (list.length > 1 && list[0] && list[0] === '24') {\n          // Make '24' the last item in k/kk\n          list.push(list.shift())\n        }\n        return list\n      }\n      if (this.baseOn12Hours) {\n        return [].concat([], this.hours.map(hr => `${hr}a`), this.hours.map(hr => `${hr}p`))\n      }\n      return this.hours\n    },\n\n    has () {\n      const result = {\n        customApmText: false\n      }\n      const apmEnabled = !!this.apmType\n\n      if (apmEnabled && this.hourRangeIn24HrFormat && this.hourRangeIn24HrFormat.length) {\n        const range = [].concat([], this.hourRangeIn24HrFormat)\n        result.am = range.some(value => value < 12 || value === 24)\n        result.pm = range.some(value => value >= 12 && value < 24)\n      } else {\n        result.am = apmEnabled\n        result.pm = apmEnabled\n      }\n      if ((this.amText && this.amText.length) || (this.pmText && this.pmText.length)) {\n        result.customApmText = true\n      }\n      return result\n    },\n\n    minuteRangeList () {\n      if (!this.minuteType || !this.opts.minuteRange) { return false }\n      if (!this.opts.minuteRange.length) { return [] }\n      return this.renderRangeList(this.opts.minuteRange, 'minute')\n    },\n\n    secondRangeList () {\n      if (!this.secondType || !this.opts.secondRange) { return false }\n      if (!this.opts.secondRange.length) { return [] }\n      return this.renderRangeList(this.opts.secondRange, 'second')\n    },\n    \n    hourLabelText () {\n      return this.hourLabel || this.hourType\n    },\n    minuteLabelText () {\n      return this.minuteLabel || this.minuteType\n    },\n    secondLabelText() {\n      return this.secondLabel || this.secondType\n    },\n    apmLabelText () {\n      return this.apmLabel || this.apmType\n    },\n\n    inputWidthStyle () {\n      if (!this.inputWidth || !this.inputWidth.length) { return }\n      return {\n        width: this.inputWidth\n      }\n    },\n\n    tokenRegexBase () {\n      return this.inUse.tokens.join('|')\n    },\n\n    tokenChunks () {\n      if (!this.manualInput && !this.useStringValue) { return false }\n\n      const formatString = String(this.formatString)\n      const tokensRegxStr = `(${this.tokenRegexBase})+?`\n      const tokensMatchAll = this.getMatchAllByRegex(formatString, tokensRegxStr)\n\n      const tokenChunks = []\n      for (let tkMatch of tokensMatchAll) {\n        const rawToken = tkMatch[0]\n        const tokenMatchItem = {\n          index: tkMatch.index,\n          token: rawToken,\n          type: this.getTokenType(rawToken),\n          needsCalibrate: rawToken.length < 2,\n          len: (rawToken || '').length\n        }\n        tokenChunks.push(tokenMatchItem)\n      }\n      return tokenChunks\n    },\n\n    needsPosCalibrate () {\n      if (!this.manualInput) { return false }\n      return this.tokenChunks.some(chk => chk.needsCalibrate)\n    },\n\n    tokenChunksPos () {\n      if (!this.manualInput) { return false }\n      if (!this.needsPosCalibrate) {\n        return this.tokenChunks.map(chk => {\n          return {\n            token: chk.token,\n            type: chk.type,\n            start: chk.index,\n            end: chk.index + chk.len\n          }\n        })\n      }\n      const list = []\n      let calibrateLen = 0\n      this.tokenChunks.forEach(chk => {\n        let chunkCurrentLen\n        // Adjust for customized AM/PM text\n        if (chk.type === 'apm' && this.has.customApmText) {\n          if (this.apm && this.apm.length) {\n            const customApmText = this.apm.toLowerCase() === 'am' ? this.amText : this.pmText\n            chunkCurrentLen = (customApmText && customApmText.length) ? customApmText.length : chk.len\n          } else {\n            chunkCurrentLen = chk.len\n          }\n        // Others\n        } else {\n          chunkCurrentLen = this[chk.type] && this[chk.type].length ? this[chk.type].length : chk.len\n        }\n        list.push({\n          token: chk.token,\n          type: chk.type,\n          start: chk.index + calibrateLen,\n          end: chk.index + calibrateLen + chunkCurrentLen\n        })\n        if (chk.needsCalibrate && chunkCurrentLen > chk.len) {\n          calibrateLen += (chunkCurrentLen - chk.len)\n        }\n      })\n      return list\n    },\n\n    invalidValues () {\n      if (this.inputIsEmpty) { return [] }\n      if (!this.restrictedHourRange && !this.minuteRangeList && !this.secondRangeList && this.opts.minuteInterval === 1 && this.opts.secondInterval === 1) { return [] }\n\n      const result = []\n      if (this.inUse.hour && !this.isEmptyValue(this.hourType, this.hour) && (!this.isValidValue(this.hourType, this.hour) || this.isDisabled('hour', this.hour))) {\n        result.push('hour')\n      }\n      if (this.inUse.minute && !this.isEmptyValue(this.minuteType, this.minute) && (!this.isValidValue(this.minuteType, this.minute) || this.isDisabled('minute', this.minute) || this.notInInterval('minute', this.minute))) {\n        result.push('minute')\n      }\n      if (this.inUse.second && !this.isEmptyValue(this.secondType, this.second) && (!this.isValidValue(this.secondType, this.second) || this.isDisabled('second', this.second) || this.notInInterval('second', this.second))) {\n        result.push('second')\n      }\n      if (this.inUse.apm && !this.isEmptyValue(this.apmType, this.apm) && (!this.isValidValue(this.apmType, this.apm) || this.isDisabled('apm', this.apm))) {\n        result.push('apm')\n      }\n      if (result.length) {\n        return result\n      }\n      return []\n    },\n\n    hasInvalidInput () {\n      return Boolean(this.invalidValues && this.invalidValues.length)\n    },\n\n    autoDirectionEnabled () {\n      return this.dropDirection === 'auto'\n    },\n\n    dropdownDirClass () {\n      if (this.autoDirectionEnabled) {\n        return this.forceDropOnTop ? 'drop-up' : 'drop-down'\n      }\n      return this.dropDirection === 'up' ? 'drop-up' : 'drop-down'      \n    }\n  },\n\n  watch: {\n    'opts.format' (newValue) {\n      this.renderFormat(newValue)\n    },\n    'opts.minuteInterval' (newInteval) {\n      this.renderList('minute', newInteval)\n    },\n    'opts.secondInterval' (newInteval) {\n      this.renderList('second', newInteval)\n    },\n    value: {\n      deep: true,\n      handler () {\n        this.readValues()\n      }\n    },\n    displayTime () {\n      this.fillValues()\n    },\n    disabled (toDisabled) {\n      if (toDisabled) {\n        // Force close dropdown and reset status when disabled\n        if (this.isActive) {\n          this.isActive = false\n        }\n        if (this.showDropdown) {\n          this.showDropdown = false\n        }\n      }\n    },\n    'invalidValues.length' (newLength, oldLength) {\n      if (newLength && newLength >= 1) {\n        this.$emit('error', this.invalidValues)\n      } else if (oldLength && oldLength >= 1) {\n        this.$emit('error', [])\n      }\n    }\n  },\n\n  methods: {\n    formatValue (token, i) {\n      if (!this.isNumber(i)) { return '' }\n      i = +i\n      switch (token) {\n        case 'H':\n        case 'h':\n        case 'k':\n        case 'm':\n        case 's':\n          if (['h', 'k'].includes(token) && i === 0) {\n            return token === 'k' ? '24' : '12'\n          }\n          return String(i)\n        case 'HH':\n        case 'mm':\n        case 'ss':\n        case 'hh':\n        case 'kk':\n          if (['hh', 'kk'].includes(token) && i === 0) {\n            return token === 'kk' ? '24' : '12'\n          }\n          return i < 10 ? `0${i}` : String(i)\n        default:\n          return ''\n      }\n    },\n\n    checkAcceptingType (validValues, formatString) {\n      if (!validValues || !formatString || !formatString.length) { return '' }\n      for (let i = 0; i < validValues.length; i++) {\n        if (formatString.indexOf(validValues[i]) > -1) {\n          return validValues[i]\n        }\n      }\n      return ''\n    },\n\n    renderFormat (newFormat) {\n      newFormat = newFormat || this.opts.format || DEFAULT_OPTIONS.format\n\n      let hourType = this.checkAcceptingType(CONFIG.HOUR_TOKENS, newFormat)\n      let minuteType = this.checkAcceptingType(CONFIG.MINUTE_TOKENS, newFormat)\n      this.secondType = this.checkAcceptingType(CONFIG.SECOND_TOKENS, newFormat)\n      this.apmType = this.checkAcceptingType(CONFIG.APM_TOKENS, newFormat)\n\n      // Failsafe checking\n      if (!hourType && !minuteType && !this.secondType && !this.apmType) {\n        if (this.debugMode && this.format) {\n          this.debugLog(`No valid tokens found in your defined \"format\" string \"${this.format}\". Fallback to the default \"HH:mm\" format.`)\n        }\n        hourType = 'HH'\n        minuteType = 'mm'\n      }\n      this.hourType = hourType\n      this.minuteType = minuteType\n\n      this.hourType ? this.renderHoursList() : this.hours = []\n      this.minuteType ? this.renderList('minute') : this.minutes = []\n      this.secondType ? this.renderList('second') : this.seconds = []\n      this.apmType ? this.renderApmList() : this.apms = []\n\n      this.$nextTick(() => {\n        this.readValues()\n      })\n    },\n\n    renderHoursList () {\n      const hoursCount = this.baseOn12Hours ? 12 : 24\n      const hours = []\n      for (let i = 0; i < hoursCount; i++) {\n        if (this.hourType === 'k' || this.hourType === 'kk') {\n          hours.push(this.formatValue(this.hourType, i + 1))\n        } else {\n          hours.push(this.formatValue(this.hourType, i))\n        }\n      }\n      this.hours = hours\n    },\n\n    renderList (listType, interval) {\n      if (!this.isMinuteOrSecond(listType)) { return }\n\n      const isMinute = listType === 'minute'\n      interval = interval || (isMinute ? (this.opts.minuteInterval || DEFAULT_OPTIONS.minuteInterval) : (this.opts.secondInterval || DEFAULT_OPTIONS.secondInterval))\n\n      const result = []\n      for (let i = 0; i < 60; i += interval) {\n        result.push(this.formatValue(isMinute ? this.minuteType : this.secondType, i))\n      }\n      isMinute ? this.minutes = result : this.seconds = result\n    },\n\n    renderApmList () {\n      this.apms = this.apmType === 'A' ? ['AM', 'PM'] : ['am', 'pm']\n    },\n\n    readValues () {\n      if (this.useStringValue) {\n        if (this.debugMode) {\n          this.debugLog(`Received a string value: \"${this.value}\"`)\n        }\n        this.readStringValues(this.value)\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`Received an object value: \"${JSON.stringify(this.value || {})}\"`)\n        }\n        this.readObjectValues(this.value)\n      }\n    },\n\n    readObjectValues (objValue) {\n      const timeValue = JSON.parse(JSON.stringify(objValue || {}))\n      const values = Object.keys(timeValue)\n\n      // Failsafe for empty `v-model` object\n      if (values.length === 0) {\n        this.addFallbackValues()\n        return\n      }\n\n      CONFIG.BASIC_TYPES.forEach(type => {\n        const token = this.getTokenByType(type)\n        if (values.indexOf(token) > -1) {\n          const sanitizedValue = this.sanitizedValue(token, timeValue[token])\n          this[type] = sanitizedValue\n          timeValue[token] = sanitizedValue\n        } else {\n          this[type] = ''\n        }\n      })\n      this.timeValue = timeValue\n    },\n\n    getMatchAllByRegex (testString, regexString) {\n      const str = 'polyfillTest'\n      const needsPolyfill = Boolean(!str.matchAll || typeof str.matchAll !== 'function')\n      return needsPolyfill ? this.polyfillMatchAll(testString, regexString) : testString.matchAll(new RegExp(regexString, 'g'))\n    },\n\n    readStringValues (stringValue) {\n      // Failsafe for empty `v-model` string\n      if (!stringValue || !stringValue.length) {\n        this.addFallbackValues()\n        return\n      }\n\n      const formatString = String(this.formatString)\n      const tokensRegxStr = `(${this.tokenRegexBase})+?`\n      const othersRegxStr = `[^(${this.tokenRegexBase})]+`\n\n      const tokensMatchAll = this.getMatchAllByRegex(formatString, tokensRegxStr)\n      const othersMatchAll = this.getMatchAllByRegex(formatString, othersRegxStr)\n\n      const chunks = []\n      const tokenChunks = []\n\n      for (let tkMatch of tokensMatchAll) {\n        const tokenMatchItem = {\n          index: tkMatch.index,\n          token: tkMatch[0],\n          isValueToken: true\n        }\n        chunks.push(tokenMatchItem)\n        tokenChunks.push(tokenMatchItem)\n      }\n\n      for (let otMatch of othersMatchAll) {\n        chunks.push({\n          index: otMatch.index,\n          token: otMatch[0]\n        })\n      }\n\n      chunks.sort((l, r) => l.index < r.index ? -1 : 1)\n\n      let regexCombo = ''\n      chunks.forEach(chunk => {\n        if (chunk.isValueToken) {\n          const tokenRegex = this.getTokenRegex(chunk.token) || ''\n          regexCombo += tokenRegex\n        } else {\n          const safeChars = chunk.token.replace(/\\\\{0}(\\*|\\?|\\.|\\+)/g, '\\\\$1')\n          regexCombo += `(?:${safeChars})`\n        }\n      })\n\n      const comboReg = new RegExp(regexCombo)\n\n      // Do test before match\n      if (comboReg.test(stringValue)) {\n        const matchResults = stringValue.match(new RegExp(regexCombo))\n        const valueResults = matchResults.slice(1, tokenChunks.length + 1)\n        const timeValue = {}\n        valueResults.forEach((value, vrIndex) => {\n          if (tokenChunks[vrIndex]) {\n            const targetToken = tokenChunks[vrIndex].token\n            timeValue[targetToken] = this.setValueFromString(value, targetToken)\n          }\n        })\n        this.timeValue = timeValue\n\n        if (this.debugMode) {\n          const tokenChunksForLog = tokenChunks.map(tChunk => tChunk && tChunk.token)\n          this.debugLog(`Successfully parsed values ${JSON.stringify(valueResults)}\\nfor ${JSON.stringify(tokenChunksForLog)}\\nin format pattern '${this.formatString}'`)\n        }\n      } else {\n        if (this.debugMode) {\n          this.debugLog(`The input string in \"v-model\" does NOT match the \"format\" pattern\\nformat: ${this.formatString}\\nv-model: ${stringValue}`)\n        }\n      }\n    },\n\n    polyfillMatchAll (targetString, regxStr) {\n      const matchesList = targetString.match(new RegExp(regxStr, 'g'))\n      const result = []\n      const indicesReg = []\n      if (matchesList && matchesList.length) {\n        matchesList.forEach(matchedItem => {\n          const existIndex = indicesReg.findIndex(idxItem => idxItem.str === matchedItem)\n          let index\n          if (existIndex >= 0) {\n            if (indicesReg[existIndex] && indicesReg[existIndex].regex) {\n              index = indicesReg[existIndex].regex.exec(targetString).index\n            }\n          } else {\n            const itemIndicesRegex = new RegExp(matchedItem, 'g')\n            index = itemIndicesRegex.exec(targetString).index\n            indicesReg.push({\n              str: String(matchedItem),\n              regex: itemIndicesRegex\n            })\n          }\n          result.push({\n            0: String(matchedItem),\n            index: index\n          })\n        })\n      }\n      return result\n    },\n\n    addFallbackValues () {\n      const timeValue = {}\n      this.inUse.types.forEach(type => {\n        timeValue[this.getTokenByType(type)] = ''\n      })\n      this.timeValue = timeValue\n    },\n\n    setValueFromString (parsedValue, token) {\n      if (!token || !parsedValue) { return '' }\n      const tokenType = this.getTokenType(token)\n      if (!tokenType || !tokenType.length) { return '' }\n      const stdValue = (parsedValue !== this.getTokenByType(tokenType)) ? parsedValue : ''\n      this[tokenType] = stdValue\n      return stdValue\n    },\n\n    fillValues (forceEmit) {\n      const fullValues = {}\n\n      const baseHour = this.hour\n      const baseHourType = this.hourType\n\n      let apmValue\n\n      // Hour type or hour value is NOT set in the \"format\" string\n      if (!baseHourType || !this.isNumber(baseHour)) {\n        CONFIG.HOUR_TOKENS.forEach(token => fullValues[token] = '')\n        apmValue = this.lowerCasedApm(this.apm || '')\n        fullValues.a = apmValue\n        fullValues.A = apmValue.toUpperCase()\n\n      // Both Hour type and value are set\n      } else {\n        const hourValue = +baseHour\n        const apmValue = (this.baseOn12Hours && this.apm) ? this.lowerCasedApm(this.apm) : false\n\n        CONFIG.HOUR_TOKENS.forEach((token) => {\n          if (token === baseHourType) {\n            fullValues[token] = baseHour\n            return\n          }\n\n          let value\n          let apm\n          switch (token) {\n            case 'H':\n            case 'HH':\n            case 'k':\n            case 'kk':\n              if (this.baseOn12Hours) {\n                if (apmValue === 'pm') {\n                  value = hourValue < 12 ? hourValue + 12 : hourValue\n                } else if (['k', 'kk'].includes(token)) {\n                  value = hourValue === 12 ? 24 : hourValue\n                } else {\n                  value = hourValue % 12\n                }\n              } else {\n                if (['k', 'kk'].includes(token)) {\n                  value = hourValue === 0 ? 24 : hourValue\n                } else {\n                  value = hourValue % 24\n                }\n              }\n              fullValues[token] = this.formatValue(token, value)\n              break\n            case 'h':\n            case 'hh':\n              // h <-> hh\n              if (this.baseOn12Hours) {\n                value = hourValue\n                apm = apmValue || ''\n              // Read from other hour formats\n              } else {\n                if (hourValue > 11 && hourValue < 24) {\n                  apm = 'pm'\n                  value = hourValue === 12 ? 12 : hourValue % 12\n                } else {\n                  apm = 'am'\n                  value = hourValue % 12 === 0 ? 12 : hourValue\n                }\n              }\n              fullValues[token] = this.formatValue(token, value)\n              fullValues.a = apm\n              fullValues.A = apm.toUpperCase()\n              break\n          }\n        })\n      }\n\n      fullValues.m = this.formatValue('m', this.minute)\n      fullValues.mm = this.formatValue('mm', this.minute)\n      fullValues.s = this.formatValue('s', this.second)\n      fullValues.ss = this.formatValue('ss', this.second)\n\n      this.fullValues = fullValues\n\n      // On lazy mode, emit `input` and `change` events only when:\n      // - The user pick a new value and then close the dropdown\n      // - The user click the (\"x\") clear button\n      if (!this.lazy || forceEmit) {\n        this.emitTimeValue()\n      }\n\n      if (this.closeOnComplete && this.allValueSelected && this.showDropdown) {\n        this.toggleActive()\n      }\n    },\n\n    getFullData () {\n      if (!this.fullValues) {\n        this.fillValues()\n      }\n      return {\n        data: JSON.parse(JSON.stringify(this.fullValues)),\n        displayTime: this.inputIsEmpty ? '' : String(this.displayTime)\n      }\n    },\n\n    emitTimeValue () {\n      if (this.lazy && this.bakDisplayTime === this.displayTime) {\n        if (this.debugMode) {\n          this.debugLog('The value does not change on `lazy` mode. Skip the emitting `input` and `change` event.')\n        }\n        return\n      }\n\n      const fullData = this.getFullData()\n\n      if (this.useStringValue) {\n        this.$emit('input', fullData.displayTime)\n      } else {\n        const fullValues = fullData.data\n        const tokensInUse = this.inUse.tokens || []\n        const timeValue = {}\n        tokensInUse.forEach((token) => {\n          timeValue[token] = fullValues[token] || ''\n        })\n        this.$emit('input', JSON.parse(JSON.stringify(timeValue)))\n      }\n\n      this.$emit('change', fullData)\n    },\n\n    translate12hRange (value) {\n      const valueT = this.match12hRange(value)\n      if (+valueT[1] === 12) {\n        return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 0 : 12)\n      }\n      return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 12 : 0)\n    },\n\n    isDisabled (type, value) {\n      if (!this.isBasicType(type) || !this.inUse[type]) { return true }\n      switch (type) {\n        case 'hour':\n          return this.isDisabledHour(value)\n        case 'minute':\n        case 'second':\n          if (!this[`${type}RangeList`]) {\n            return false\n          }\n          return !this[`${type}RangeList`].includes(value)\n        case 'apm':\n          if (!this.restrictedHourRange) {\n            return false\n          }\n          return !this.has[this.lowerCasedApm(value)]\n        default:\n          return true\n      }\n    },\n\n    isDisabledHour (value) {\n      if (!this.restrictedHourRange) { return false }\n      if (this.baseOn12Hours) {\n        if (!this.apm || !this.apm.length) {\n          return false\n        } else {\n          const token = this.apm.toLowerCase() === 'am' ? 'a' : 'p'\n          return !this.restrictedHourRange.includes(`${+value}${token}`)\n        }\n      }\n      // Fallback for 'HH' and 'H hour format with a `hour-range` in a 12-hour form\n      if (\n        (this.hourType === 'HH' || this.hourType === 'H') &&\n        +value === 0 && this.restrictedHourRange.includes(24)\n      ) {\n        return false\n      }\n      return !this.restrictedHourRange.includes(+value)\n    },\n\n    notInInterval (section, value) {\n      if (!section || !this.isMinuteOrSecond(section)) { return }\n      if (this.opts[`${section}Interval`] === 1) { return false }\n      return +value % this.opts[`${section}Interval`] !== 0\n    },\n\n    renderRangeList (rawRange, section) {\n      if (!rawRange || !section || !this.isMinuteOrSecond(section)) { return [] }\n      const range = []\n      let formatedValue\n      rawRange.forEach(value => {\n        if (value instanceof Array) {\n          if (value.length > 2 && this.debugMode) {\n            this.debugLog(`Nested array within \"${section}-range\" must contain no more than two items. Only the first two items of ${JSON.stringify(value)} will be taken into account.`)\n          }\n          const start = value[0]\n          const end = value[1] || value[0]\n          for (let i = +start; i <= +end; i++) {\n            if (i < 0 || i > 59) { continue }\n            formatedValue = this.formatValue(this.getTokenByType(section), i)\n            if (!range.includes(formatedValue)) {\n              range.push(formatedValue)\n            }\n          }\n        } else {\n          if (+value < 0 || +value > 59) { return }\n          formatedValue = this.formatValue(this.getTokenByType(section), value)\n          if (!range.includes(formatedValue)) {\n            range.push(formatedValue)\n          }\n        }\n      })\n      range.sort((l, r) => { return l - r })\n      // Debug Mode\n      if (this.debugMode) {\n        const fullList = (section === 'minute' ? this.minutes : this.seconds) || []\n        const validItems = fullList.filter(item => range.includes(item))\n        if (!validItems || !validItems.length) {\n          if (section === 'minute') {\n            this.debugLog(`The minute list is empty due to the \"minute-range\" config\\nminute-range: ${JSON.stringify(this.minuteRange)}\\nminute-interval: ${this.opts.minuteInterval}`)\n          } else {\n            this.debugLog(`The second list is empty due to the \"second-range\" config\\nsecond-range: ${JSON.stringify(this.secondRange)}\\nsecond-interval: ${this.opts.secondInterval}`)\n          }\n        }\n      }\n      return range\n    },\n\n    forceApmSelection () {\n      if (this.manualInput) {\n        // Skip this to allow users to paste a string value from the clipboard in Manual Input mode\n        return\n      }\n      if (this.apmType && !this.apm) {\n        if (this.has.am || this.has.pm) {\n          this.doClearApmChecking = true\n          const apmValue = this.has.am ? 'am' : 'pm'\n          this.apm = this.apmType === 'A' ? apmValue.toUpperCase() : apmValue\n        }\n      }\n    },\n\n    emptyApmSelection () {\n      if (this.doClearApmChecking && this.hour === '' && this.minute === '' && this.second === '') {\n        this.apm = ''\n      }\n      this.doClearApmChecking = false\n    },\n\n    apmDisplayText (apmValue) {\n      if (this.amText && this.lowerCasedApm(apmValue) === 'am') {\n        return this.amText\n      }\n      if (this.pmText && this.lowerCasedApm(apmValue) === 'pm') {\n        return this.pmText\n      }\n      return apmValue\n    },\n\n    toggleActive () {\n      if (this.disabled) { return }\n      this.isActive = !this.isActive\n\n      if (this.isActive) {\n        this.isFocusing = true\n        if (this.manualInput) {\n          this.$emit('focus')\n        }\n        if (!this.opts.hideDropdown) {\n          this.setDropdownState(true)\n        }\n        // Record to check if value did change in the later phase\n        if (this.lazy) {\n          this.bakDisplayTime = String(this.displayTime || '')\n        }\n        if (this.manualInput && !this.inputIsEmpty) {\n          this.$nextTick(() => {\n            if (this.$refs.input && this.$refs.input.selectionStart === 0 && this.$refs.input.selectionEnd === this.displayTime.length) {\n              // Select the first slot instead of the whole value string when tabbed in\n              this.selectFirstSlot()\n            }\n          })\n        }\n      } else {\n        if (this.showDropdown) {\n          this.setDropdownState(false)\n        } else if (this.manualInput) {\n          this.$emit('blur', this.getFullData())\n        }\n        this.isFocusing = false\n        if (this.lazy) {\n          this.fillValues(true)\n          this.bakDisplayTime = undefined\n        }\n      }\n\n      if (this.restrictedHourRange && this.baseOn12Hours) {\n        this.showDropdown ? this.forceApmSelection() : this.emptyApmSelection()\n      }\n      if (this.showDropdown) {\n        this.checkForAutoScroll()\n      }\n    },\n\n    setDropdownState (toShow, fromUserClick = false) {\n      if (toShow) {\n        if (this.appendToBody) {\n          this.appendDropdownToBody()\n        }\n        this.keepFocusing()\n        if (this.autoDirectionEnabled) {\n          this.checkDropDirection()\n        }\n        this.showDropdown = true\n        this.$emit('open') \n        if (fromUserClick) {\n          if (this.fixedDropdownButton) {\n            this.isActive = true\n          }\n          this.$emit('blur', this.getFullData())\n          this.checkForAutoScroll()\n        }\n      } else {\n        this.showDropdown = false\n        this.$emit('close', this.getFullData())\n        if (this.appendToBody) {\n          this.removeDropdownFromBody()\n        }\n      }\n    },\n\n    appendDropdownToBody () {\n      const dropdown = this.$refs && this.$refs.dropdown\n      const body = document.getElementsByTagName('body')[0]\n      if (body && dropdown) {\n        window.addEventListener('scroll', this.updateDropdownPos)\n        dropdown.classList.add('vue__time-picker-dropdown')\n        this.updateDropdownPos()\n        body.appendChild(dropdown)\n      }\n    },\n\n    updateDropdownPos () {\n      if (!this.appendToBody) { return }\n      const dropdown = this.$refs && this.$refs.dropdown\n      const body = document.getElementsByTagName('body')[0]\n      if (body && dropdown) {\n        const box = this.$el.getBoundingClientRect()\n        if (this.dropdownDirClass === 'drop-up') {\n          dropdown.style.bottom = `${window.innerHeight - box.y}px`\n          dropdown.style.top = 'auto'\n        } else {\n          dropdown.style.top = `${box.y + box.height}px`\n          dropdown.style.bottom = 'auto'\n        }\n        dropdown.style.left = `${box.x}px`\n      }\n    },\n\n    removeDropdownFromBody () {\n      const dropdown = this.$refs && this.$refs.dropdown\n      const body = document.getElementsByTagName('body')[0]\n      if (body && dropdown && body.contains(dropdown)) {\n        body.removeChild(dropdown)\n      }\n      if (dropdown) {\n        dropdown.classList.remove('vue__time-picker-dropdown')\n        dropdown.style.top = ''\n        dropdown.style.bottom = ''\n        dropdown.style.left = ''\n        this.$el.appendChild(dropdown)\n      }\n      window.removeEventListener('scroll', this.updateDropdownPos)\n    },\n\n    blurEvent () {\n      if (this.manualInput && !this.opts.hideDropdown) {\n        // hideDropdown's `blur` event is handled somewhere else\n        this.$emit('blur', this.getFullData())\n      }\n    },\n\n    select (type, value) {\n      if (this.isBasicType(type) && !this.isDisabled(type, value)) {\n        this[type] = value\n        if (this.doClearApmChecking) {\n          this.doClearApmChecking = false\n        }\n      }\n    },\n\n    clearTime () {\n      if (this.disabled) { return }\n      this.hour = ''\n      this.minute = ''\n      this.second = ''\n      this.apm = ''\n\n      if (this.manualInput && this.$refs && this.$refs.input && this.$refs.input.value.length) {\n        this.$refs.input.value = ''\n      }\n\n      if (this.lazy) {\n        this.fillValues(true)\n      }\n    },\n\n    //\n    // Auto-Scroll\n    //\n\n    checkForAutoScroll () {\n      if (this.inputIsEmpty) { return }\n      if (this.autoScroll) {\n        this.$nextTick(() => {\n          this.scrollToSelectedValues()\n        })\n      } else if (this.advancedKeyboard) {\n        // Auto-focus on selected value in the first column for advanced-keyboard\n        this.$nextTick(() => {\n          const firstColumn = this.inUse.types[0]\n          this.scrollToSelected(firstColumn, true)\n        })\n      }\n    },\n\n    scrollToSelected (column, allowFallback = false) {\n      if (!this.timeValue || this.inputIsEmpty) { return }\n      let targetList\n      if (this.appendToBody && this.$refs && this.$refs.dropdown) {\n        targetList = this.$refs.dropdown.querySelectorAll(`ul.${column}s`)[0]\n      } else {\n        targetList = this.$el.querySelectorAll(`ul.${column}s`)[0]\n      }\n      let targetValue = this.activeItemInCol(column)[0]\n      if (!targetValue && allowFallback) {\n        // No value selected in the target column, fallback to the first found valid item\n        targetValue = this.validItemsInCol(column)[0]\n      }\n      if (targetList && targetValue) {\n        targetList.scrollTop = targetValue.offsetTop || 0\n        if (this.advancedKeyboard) {\n          targetValue.focus()\n        }\n      }\n    },\n\n    scrollToSelectedValues () {\n      if (!this.timeValue || this.inputIsEmpty) { return }\n      this.inUse.types.forEach(section => {\n        this.scrollToSelected(section)\n      })\n    },\n\n    //\n    // Additional Keyboard Navigation\n    //\n\n    onFocus () {\n      if (this.disabled) { return }\n      if (!this.isFocusing) {\n        this.isFocusing = true\n      }\n      if (!this.isActive) {\n        this.toggleActive()\n      }\n    },\n\n    escBlur () {\n      if (this.disabled) { return }\n      window.clearTimeout(this.debounceTimer)\n      this.isFocusing = false\n      const inputBox = this.$el.querySelectorAll('input.display-time')[0]\n      if (inputBox) {\n        inputBox.blur()\n      }\n    },\n\n    debounceBlur () {\n      if (this.disabled) { return }\n      this.isFocusing = false\n      window.clearTimeout(this.debounceTimer)\n      this.debounceTimer = window.setTimeout(() => {\n        window.clearTimeout(this.debounceTimer)\n        this.onBlur()\n      }, this.opts.blurDelay)\n    },\n\n    onBlur () {\n      if (!this.disabled && !this.isFocusing && this.isActive) {\n        this.toggleActive()\n      }\n    },\n\n    keepFocusing () {\n      if (this.disabled) { return }\n      window.clearTimeout(this.debounceTimer)\n      if (!this.isFocusing) {\n        this.isFocusing = true\n      }\n    },\n\n    onTab (column, value, evt) {\n      if (this.appendToBody && evt.shiftKey) {\n        const firstColumn = this.inUse.types[0]\n        if (column !== firstColumn) { return }\n        const firstValidValue = this.validItemsInCol(firstColumn)[0]\n        // Is the first valid item in the first column\n        if (firstValidValue && firstValidValue.getAttribute('data-key') === String(value)) {\n          evt.preventDefault()\n          // Focus back on <input>\n          if (this.$refs && this.$refs.input) {\n            this.$refs.input.focus()\n          }\n        }\n      }\n    },\n\n    validItemsInCol (column) {\n      const columnClass = `${column}s`\n      if (this.appendToBody && this.$refs && this.$refs.dropdown) {\n        return this.$refs.dropdown.querySelectorAll(`ul.${columnClass} > li:not(.hint):not([disabled])`)\n      }\n      return this.$el.querySelectorAll(`ul.${columnClass} > li:not(.hint):not([disabled])`)\n    },\n\n    activeItemInCol (column) {\n      const columnClass = `${column}s`\n      if (this.appendToBody && this.$refs && this.$refs.dropdown) {\n        return this.$refs.dropdown.querySelectorAll(`ul.${columnClass} > li.active:not(.hint)`)\n      }\n      return this.$el.querySelectorAll(`ul.${columnClass} > li.active:not(.hint)`)\n    },\n\n    getClosestSibling (column, dataKey, getPrevious = false) {\n      const siblingsInCol = this.validItemsInCol(column)\n      const selfIndex = Array.prototype.findIndex.call(siblingsInCol, (sbl) => {\n        return sbl.getAttribute('data-key') === dataKey\n      })\n\n      // Already the first item\n      if (getPrevious && selfIndex === 0) {\n        return siblingsInCol[siblingsInCol.length - 1]\n      }\n      // Already the last item\n      if (!getPrevious && selfIndex === siblingsInCol.length - 1) {\n        return siblingsInCol[0]\n      }\n      // Selected value not in the valid values list\n      if (selfIndex < 0) {\n        return siblingsInCol[0]\n      }\n\n      if (getPrevious) {\n        return siblingsInCol[selfIndex - 1]\n      }\n      return siblingsInCol[selfIndex + 1]\n    },\n\n    prevItem (column, dataKey, isManualInput = false) {\n      const targetItem = this.getClosestSibling(column, dataKey, true)\n      if (targetItem) {\n        return isManualInput ? targetItem : targetItem.focus()\n      }\n    },\n\n    nextItem (column, dataKey, isManualInput = false) {\n      const targetItem = this.getClosestSibling(column, dataKey, false)\n      if (targetItem) {\n        return isManualInput ? targetItem : targetItem.focus()\n      }\n    },\n\n    getSideColumnName (currentColumn, toLeft = false) {\n      const currentColumnIndex = this.inUse.types.indexOf(currentColumn)\n      if (toLeft && currentColumnIndex <= 0) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the leftmost list already')\n        }\n        return\n      } else if (!toLeft && currentColumnIndex === (this.inUse.types.length - 1)) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the rightmost list already')\n        }\n        return\n      }\n      return this.inUse.types[toLeft ? currentColumnIndex - 1 : currentColumnIndex + 1]\n    },\n\n    getFirstItemInSideColumn (currentColumn, toLeft = false) {\n      const targetColumn = this.getSideColumnName(currentColumn, toLeft)\n      if (!targetColumn) { return }\n      const listItems = this.validItemsInCol(targetColumn)\n      if (listItems && listItems[0]) {\n        return listItems[0]\n      }\n    },\n\n    getActiveItemInSideColumn (currentColumn, toLeft = false) {\n      const targetColumn = this.getSideColumnName(currentColumn, toLeft)\n      if (!targetColumn) { return }\n      const activeItems = this.activeItemInCol(targetColumn)\n      if (activeItems && activeItems[0]) {\n        return activeItems[0]\n      }\n    },\n\n    toLeftColumn (currentColumn) {\n      const targetItem = this.getActiveItemInSideColumn(currentColumn, true) || this.getFirstItemInSideColumn(currentColumn, true)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    toRightColumn (currentColumn) {\n      const targetItem = this.getActiveItemInSideColumn(currentColumn, false) || this.getFirstItemInSideColumn(currentColumn, false)\n      if (targetItem) {\n        targetItem.focus()\n      }\n    },\n\n    //\n    // Manual Input\n    //\n\n    onMouseDown () {\n      if (!this.manualInput) { return }\n      window.clearTimeout(this.selectionTimer)\n      this.selectionTimer = window.setTimeout(() => {\n        window.clearTimeout(this.selectionTimer)\n        if (this.$refs && this.$refs.input) {\n          const nearestSlot = this.getNearestChunkByPos(this.$refs.input.selectionStart || 0)\n          this.debounceSetInputSelection(nearestSlot)\n        }\n      }, 50)\n    },\n\n    keyDownHandler (evt) {\n      if (evt.isComposing || evt.keyCode === 229) {\n        // Skip IME inputs\n        evt.preventDefault()\n        evt.stopPropagation()\n        return false\n      }\n      // Numbers\n      if ((evt.keyCode >= 48 && evt.keyCode <= 57) || (evt.keyCode >= 96 && evt.keyCode <= 105)) {\n        evt.preventDefault()\n        this.keyboardInput(evt.key)\n      // A|P|M\n      } else if ([65, 80, 77].includes(evt.keyCode)) {\n        evt.preventDefault()\n        this.keyboardInput(evt.key, true)\n      // Arrow keys\n      } else if (evt.keyCode >= 37 && evt.keyCode <= 40) {\n        evt.preventDefault()\n        this.clearKbInputLog()\n        this.arrowHandler(evt)\n      // Delete|Backspace\n      } else if (evt.keyCode === 8 || evt.keyCode === 46) {\n        evt.preventDefault()\n        this.clearKbInputLog()\n        this.clearTime()\n      // Tab\n      } else if (evt.keyCode === 9) {\n        this.clearKbInputLog()\n        this.tabHandler(evt)\n      // Colon|Space\n      } else if (evt.keyCode === 186 || evt.keyCode === 32) {\n        evt.preventDefault()\n        this.clearKbInputLog()\n        this.toNextSlot()\n      // Prevent any Non-ESC and non-pasting inputs\n      } else if (evt.keyCode !== 27 && !(evt.metaKey || evt.ctrlKey)) {\n        evt.preventDefault()\n      }\n    },\n\n    onCompostionStart (evt) {\n      evt.preventDefault()\n      evt.stopPropagation()\n      this.bakCurrentPos = this.getCurrentTokenChunk()\n      return false\n    },\n\n    onCompostionEnd (evt) {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      const cpsData = evt.data\n      let inputIsCustomApmText = false\n      if (this.has.customApmText) {\n        inputIsCustomApmText = this.isCustomApmText(cpsData)\n      }\n      if (inputIsCustomApmText) {\n        this.setSanitizedValueToSection('apm', inputIsCustomApmText)\n      }\n\n      this.$refs.input.value = this.has.customApmText ? this.customDisplayTime : this.displayTime\n\n      this.$nextTick(() => {\n        if (this.bakCurrentPos) {\n          const bakPos = JSON.parse(JSON.stringify(this.bakCurrentPos))\n          if (inputIsCustomApmText) {\n            bakPos.end = (bakPos.start + cpsData.length)\n          }\n          this.debounceSetInputSelection(bakPos)\n          this.bakCurrentPos = null\n        }\n      })\n      return false\n    },\n\n    pasteHandler (evt) {\n      evt.preventDefault()\n      let pastingText = (evt.clipboardData || window.clipboardData).getData('text')\n      if (this.debugMode) {\n        this.debugLog(`Pasting value \"${pastingText}\" from clipboard`)\n      }\n      if (!pastingText || !pastingText.length) { return }\n\n      // Replace custom AM/PM text (if any)\n      if (this.has.customApmText) {\n        pastingText = this.replaceCustomApmText(pastingText)\n      }\n\n      if (this.inputIsEmpty) {\n        this.readStringValues(pastingText)\n      } else {\n        this.kbInputLog = pastingText.substr(-2, 2)\n        this.setKbInput()\n        this.debounceClearKbLog()\n      }\n    },\n\n    arrowHandler (evt) {\n      const direction = { 37: 'L', 38: 'U', 39: 'R', 40: 'D' }[evt.keyCode]\n      if (direction === 'U' || direction === 'D') {\n        if (this.inputIsEmpty) {\n          this.selectFirstValidValue()\n        } else {\n          const currentChunk = this.getCurrentTokenChunk()\n          if (!currentChunk) {\n            this.selectFirstValidValue()\n            return\n          }\n          const tokenType = currentChunk.type\n          this.getClosestValidItemInCol(tokenType, this[tokenType], direction)\n          const newChunkPos = this.getCurrentTokenChunk()\n          this.debounceSetInputSelection(newChunkPos)\n        }\n      } else if (direction === 'R') {\n        this.toLateralToken(false)\n      } else if (direction === 'L') {\n        this.toLateralToken(true)\n      }\n    },\n\n    tabHandler (evt) {\n      if (!this.inputIsEmpty && this.tokenChunksPos && this.tokenChunksPos.length) {\n        const currentChunk = this.getCurrentTokenChunk()\n        if (!currentChunk) { return }\n        const firstChunk = this.tokenChunksPos[0]\n        const lastChunk = this.tokenChunksPos[this.tokenChunksPos.length - 1]\n        if ((evt.shiftKey && currentChunk.token !== firstChunk.token) || (!evt.shiftKey && currentChunk.token !== lastChunk.token)) {\n          evt.preventDefault()\n          this.toLateralToken(evt.shiftKey)\n        }\n      } else if (this.appendToBody && this.advancedKeyboard) {\n        if (evt.shiftKey) { return }\n        evt.preventDefault()\n        if (this.inputIsEmpty) {\n          const firstColumn = this.inUse.types[0]\n          const targetValue = this.validItemsInCol(firstColumn)[0]\n          if (targetValue) {\n            targetValue.focus()\n          }\n        }\n      }\n    },\n\n    keyboardInput (newChar, isApm = false) {\n      const currentChunk = this.getCurrentTokenChunk()\n      if (!currentChunk || (currentChunk.type !== 'apm' && isApm) || (currentChunk.type === 'apm' && !isApm)) { return }\n      this.kbInputLog = `${this.kbInputLog.substr(-1)}${newChar}`\n      this.setKbInput()\n      this.debounceClearKbLog()\n    },\n\n    clearKbInputLog () {\n      window.clearTimeout(this.kbInputTimer)\n      this.kbInputLog = ''\n    },\n\n    debounceClearKbLog () {\n      window.clearTimeout(this.kbInputTimer)\n      this.kbInputTimer = window.setTimeout(() => {\n        this.clearKbInputLog()\n      }, this.opts.manualInputTimeout)\n    },\n\n    setKbInput (value) {\n      value = value || this.kbInputLog\n      const currentChunk = this.getCurrentTokenChunk()\n      if (!currentChunk || !value || !value.length) { return }\n      const chunkType = currentChunk.type\n      const chunkToken = currentChunk.token\n\n      let validValue\n      if (chunkType === 'apm') {\n        if (this.lowerCasedApm(value).includes('a')) {\n          validValue = 'am'\n        } else if (this.lowerCasedApm(value).includes('p')) {\n          validValue = 'pm'\n        }\n        if (validValue) {\n          validValue = chunkToken === 'A' ? validValue.toUpperCase() : validValue\n        }\n      } else {\n        if (this.isValidValue(chunkToken, value)) {\n          validValue = value\n        } else {\n          const lastInputValue = this.formatValue(chunkToken, value.substr(-1))\n          if (this.isValidValue(chunkToken, lastInputValue)) {\n            validValue = lastInputValue\n          }\n        }\n      }\n\n      if (validValue) {\n        this.setSanitizedValueToSection(chunkType, validValue)\n        const newChunkPos = this.getCurrentTokenChunk()\n        this.debounceSetInputSelection(newChunkPos)      \n      }\n      if (this.debugMode) {\n        if (validValue) {\n          this.debugLog(`Successfully set value \"${validValue}\" from latest input \"${value}\" for the \"${chunkType}\" slot`)\n        } else {\n          this.debugLog(`Value \"${value}\" is invalid in the \"${chunkType}\" slot`)\n        }\n      }\n    },\n\n    // Form Autofill\n    onChange () {\n      if (!this.manualInput || !this.$refs || !this.$refs.input) { return }\n      const autoFillValue = this.$refs.input.value || ''\n      if (autoFillValue && autoFillValue.length) {\n        this.readStringValues(autoFillValue)\n      }\n    },\n\n    getNearestChunkByPos (startPos) {\n      if (!this.tokenChunksPos || !this.tokenChunksPos.length) { return }\n      let nearest\n      let nearestDelta = -1\n      for (let i = 0; i < this.tokenChunksPos.length; i++) {\n        const chunk = JSON.parse(JSON.stringify(this.tokenChunksPos[i]))\n        if (chunk.start === startPos) {\n          return chunk\n        }\n        const delta = Math.abs(chunk.start - startPos)\n        if (nearestDelta < 0) {\n          nearest = chunk\n          nearestDelta = delta\n        } else {\n          if (nearestDelta <= delta) {\n            return nearest\n          }\n          nearestDelta = delta\n          nearest = chunk\n        }\n      }\n      return nearest\n    },\n\n    selectFirstValidValue () {\n      if (!this.tokenChunksPos || !this.tokenChunksPos.length) { return }\n      const firstSlotType = this.tokenChunksPos[0].type\n      if (firstSlotType === 'hour') {\n        this.getClosestHourItem()\n      } else {\n        this.getClosestValidItemInCol(firstSlotType, this[firstSlotType])\n      }\n      this.selectFirstSlot()\n    },\n\n    getClosestHourItem (currentValue, direction = 'U') {\n      if (!this.validHoursList || !this.validHoursList.length) {\n        if (this.debugMode) {\n          this.debugLog(`No valid hour values found, please check your \"hour-range\" config\\nhour-range: ${JSON.stringify(this.hourRange)}`)\n        }\n        return\n      }\n      if (!currentValue) {\n        this.setManualHour(this.validHoursList[0])\n        return\n      }\n      const currentIndex = this.validHoursList.findIndex(item => {\n        if (!this.baseOn12Hours) {\n          return item === currentValue\n        } else {\n          const valueKey = `${currentValue}${this.lowerCasedApm(this.apm) === 'pm' ? 'p' : 'a'}` \n          return item === valueKey\n        }\n      })\n      let nextIndex\n      if (currentIndex === -1) {\n        nextIndex = 0\n      } else if (direction === 'D') {\n        nextIndex = currentIndex === 0 ? this.validHoursList.length - 1 : currentIndex - 1\n      } else {\n        nextIndex = (currentIndex + 1) % this.validHoursList.length\n      }\n      const nextItem = this.validHoursList[nextIndex]\n      this.setManualHour(nextItem)\n    },\n\n    getClosestValidItemInCol (column, currentValue, direction = 'U') {\n      if (column === 'hour') {\n        this.getClosestHourItem(currentValue, direction)\n      } else {\n        const nextItem = direction === 'D' ? this.prevItem(column, this[column], true) : this.nextItem(column, this[column], true)\n        if (nextItem) {\n          this.select(column, nextItem.getAttribute('data-key'))\n        }\n      }\n    },\n\n    setSanitizedValueToSection (section, inputValue) {\n      if (!section || !this.getTokenByType(section)) { return }\n      // NOTE: Disabled values are allowed here, followed by an 'error' event, though\n      const sanitizedValue = this.sanitizedValue(this.getTokenByType(section), inputValue)\n      this[section] = sanitizedValue\n    },\n\n    setManualHour (nextItem) {\n      if (this.is12hRange(nextItem)) {\n        const hourT = this.match12hRange(nextItem)\n        const apmValue = hourT[2] === 'a' ? 'AM' : 'PM'\n        this.setSanitizedValueToSection('apm', this.apmType === 'a' ? apmValue.toLowerCase() : apmValue)\n        this.setSanitizedValueToSection('hour', hourT[1])\n      } else {\n        this.setSanitizedValueToSection('hour', nextItem)\n      }\n    },\n\n    debounceSetInputSelection ({start = 0, end = 0 }) {\n      this.$nextTick(() => {\n        this.setInputSelectionRange(start, end)\n      })\n      window.clearTimeout(this.selectionTimer)\n      this.selectionTimer = window.setTimeout(() => {\n        window.clearTimeout(this.selectionTimer)\n        // Double-check selection for 12hr format\n        if (this.$refs.input && (this.$refs.input.selectionStart !== start || this.$refs.input.selectionEnd !== end)) {\n          this.setInputSelectionRange(start, end)\n        }\n      }, 30)\n    },\n\n    setInputSelectionRange (start, end) {\n      if (this.$refs && this.$refs.input) {\n        this.$refs.input.setSelectionRange(start, end)\n      }\n    },\n\n    getCurrentTokenChunk () {\n      return this.getNearestChunkByPos((this.$refs.input && this.$refs.input.selectionStart) || 0)\n    },\n\n    selectFirstSlot () {\n      const firstChunkPos = this.getNearestChunkByPos(0)\n      this.debounceSetInputSelection(firstChunkPos)\n    },\n\n    toNextSlot () {\n      if (!this.inputIsEmpty && this.tokenChunksPos && this.tokenChunksPos.length) {\n        const currentChunk = this.getCurrentTokenChunk()\n        if (!currentChunk) { return }\n        const lastChunk = this.tokenChunksPos[this.tokenChunksPos.length - 1]\n        if (currentChunk.token !== lastChunk.token) {\n          this.toLateralToken(false)\n        }\n      }\n    },\n\n    toLateralToken (toLeft) {\n      const currentChunk = this.getCurrentTokenChunk()\n      if (!currentChunk) {\n        this.selectFirstValidValue()\n        return\n      }\n      const currentChunkIndex = this.tokenChunksPos.findIndex(chk => chk.token === currentChunk.token)\n      if ((!toLeft && currentChunkIndex >= this.tokenChunksPos.length - 1) || (toLeft && currentChunkIndex === 0)) {\n        if (this.debugMode) {\n          if (toLeft) {\n            this.debugLog('You\\'re in the leftmost slot already')\n          } else {\n            this.debugLog('You\\'re in the rightmost slot already')\n          }\n        }\n        return\n      }\n      const targetSlotPos = toLeft ? this.tokenChunksPos[currentChunkIndex - 1] : this.tokenChunksPos[currentChunkIndex + 1]\n      this.debounceSetInputSelection(targetSlotPos)\n    },\n\n    isCustomApmText (inputData) {\n      if (!inputData || !inputData.length) { return false }\n      if (this.amText && this.amText === inputData) {\n        return this.apmType === 'A' ? 'AM' : 'am'\n      }\n      if (this.pmText && this.pmText === inputData) {\n        return this.apmType === 'A' ? 'PM' : 'pm'\n      }\n      return false\n    },\n\n    replaceCustomApmText (inputString) {\n      if (this.amText && this.amText.length && inputString.includes(this.amText)) {\n        return inputString.replace(new RegExp(this.amText, 'g'), this.apmType === 'A' ? 'AM' : 'am')\n      } else if (this.pmText && this.pmText.length && inputString.includes(this.pmText)) {\n        return inputString.replace(new RegExp(this.pmText, 'g'), this.apmType === 'A' ? 'PM' : 'pm')\n      }\n      return inputString\n    },\n\n    checkDropDirection () {\n      if (!this.$el) { return }\n      let container\n      if (this.containerId && this.containerId.length) {\n        container = document.getElementById(this.containerId)\n        if (!container && this.debugMode) {\n          this.debugLog(`Container with id \"${this.containerId}\" not found. Fallback to document body.`)\n        }\n      }\n      const el = this.$el\n      let spaceDown\n      if (container && container.offsetHeight) {\n        // Valid container found\n        spaceDown = (container.offsetTop + container.offsetHeight) - (el.offsetTop + el.offsetHeight)\n      } else {\n        // Fallback to document body\n        const docHeight = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight)\n        spaceDown = docHeight - (el.offsetTop + el.offsetHeight)\n      }\n      this.forceDropOnTop = this.opts.dropOffsetHeight > spaceDown\n    },\n\n    //\n    // Helpers\n    //\n\n    is12hRange (value) {\n      return /^\\d{1,2}(a|p|A|P)$/.test(value)\n    },\n\n    match12hRange (value) {\n      return value.match(/^(\\d{1,2})(a|p|A|P)$/)\n    },\n\n    isNumber (value) {\n      return !isNaN(parseFloat(value)) && isFinite(value)\n    },\n\n    isBasicType (type) {\n      return CONFIG.BASIC_TYPES.includes(type)\n    },\n\n    lowerCasedApm (apmValue) {\n      return (apmValue || '').toLowerCase()\n    },\n\n    getTokenRegex (token) {\n      switch (token) {\n        case 'HH':\n          return '([01][0-9]|2[0-3]|H{2})'\n        case 'H':\n          return '([0-9]{1}|1[0-9]|2[0-3]|H{1})'\n        case 'hh':\n          return '(0[1-9]|1[0-2]|h{2})'\n        case 'h':\n          return '([1-9]{1}|1[0-2]|h{1})'\n        case 'kk':\n          return '(0[1-9]|1[0-9]|2[0-4]|k{2})'\n        case 'k':\n          return '([1-9]{1}|1[0-9]|2[0-4]|k{1})'\n        case 'mm':\n          return '([0-5][0-9]|m{2})'\n        case 'ss':\n          return '([0-5][0-9]|s{2})'\n        case 'm':\n          return '([0-9]{1}|[1-5][0-9]|m{1})'\n        case 's':\n          return '([0-9]{1}|[1-5][0-9]|s{1})'\n        case 'A':\n          return '(AM|PM|A{1})'\n        case 'a':\n          return '(am|pm|a{1})'\n        default:\n          return ''\n      }\n    },\n\n    isEmptyValue (targetToken, testValue) {\n      return (!testValue || !testValue.length) || (testValue && testValue === targetToken)\n    },\n\n    isValidValue (targetToken, testValue) {\n      if (!targetToken || this.isEmptyValue(targetToken, testValue)) { return false }\n      const tokenRegexStr = this.getTokenRegex(targetToken)\n      if (!tokenRegexStr || !tokenRegexStr.length) { return false }\n      return (new RegExp(`^${tokenRegexStr}$`)).test(testValue)\n    },\n\n    sanitizedValue (targetToken, inputValue) {\n      if (this.isValidValue(targetToken, inputValue)) {\n        return inputValue\n      }\n      return ''\n    },\n\n    getTokenType (token) {\n      return this.inUse.types[this.inUse.tokens.indexOf(token)] || ''\n    },\n\n    getTokenByType (type) {\n      return this[`${type}Type`] || ''\n    },\n\n    isMinuteOrSecond (type) {\n      return ['minute', 'second'].includes(type)\n    },\n\n    debugLog (logText) {\n      if (!logText || !logText.length) { return }\n      let identifier = ''\n      if (this.id) {\n        identifier += `#${this.id}`\n      }\n      if (this.name) {\n        identifier += `[name=${this.name}]`\n      }\n      if (this.inputClass) {\n        let inputClasses = []\n        if (typeof this.inputClass === 'string') {\n          inputClasses = this.inputClass.split(/\\s/g)\n        } else if (Array.isArray(this.inputClass)) {\n          inputClasses = [].concat([], this.inputClass)\n        } else if (typeof this.inputClass === 'object') {\n          Object.keys(this.inputClass).forEach(clsName => {\n            if (this.inputClass[clsName]) {\n              inputClasses.push(clsName)\n            }\n          })\n        }\n        for (let inputClass of inputClasses) {\n          if (inputClass && inputClass.trim().length) {\n            identifier += `.${inputClass.trim()}`\n          }\n        }\n      }\n      const finalLogText = `DEBUG: ${logText}${identifier ? `\\n\\t(${identifier})` : '' }`\n      if (window.console.debug && typeof window.console.debug === 'function') {\n        window.console.debug(finalLogText)\n      } else {\n        window.console.log(finalLogText)\n      }\n    }\n  },\n\n  mounted () {\n    window.clearTimeout(this.debounceTimer)\n    window.clearTimeout(this.selectionTimer)\n    window.clearTimeout(this.kbInputTimer)\n    this.renderFormat()\n  },\n\n  beforeDestroy () {\n    window.clearTimeout(this.debounceTimer)\n    window.clearTimeout(this.selectionTimer)\n    window.clearTimeout(this.kbInputTimer)\n  }\n}\n</script>\n\n<template>\n<span class=\"vue__time-picker time-picker\" :style=\"inputWidthStyle\">\n  <input type=\"text\" class=\"display-time\" ref=\"input\"\n         :class=\"[inputClass, {'is-empty': inputIsEmpty, 'invalid': hasInvalidInput, 'all-selected': allValueSelected, 'disabled': disabled, 'has-custom-icon': $slots && $slots.icon }]\"\n         :style=\"inputWidthStyle\"\n         :id=\"id\"\n         :name=\"name\"\n         :value=\"inputIsEmpty ? null : customDisplayTime\"\n         :placeholder=\"placeholder ? placeholder : formatString\"\n         :tabindex=\"disabled ? -1 : tabindex\"\n         :disabled=\"disabled\"\n         :readonly=\"!manualInput\"\n         :autocomplete=\"autocomplete\"\n         @focus=\"onFocus\"\n         @change=\"onChange\"\n         @blur=\"debounceBlur(); blurEvent()\"\n         @mousedown=\"onMouseDown\"\n         @keydown=\"keyDownHandler\"\n         @compositionstart=\"onCompostionStart\"\n         @compositionend=\"onCompostionEnd\"\n         @paste=\"pasteHandler\"\n         @keydown.esc.exact=\"escBlur\" />\n  <div class=\"controls\" v-if=\"showClearBtn || showDropdownBtn\" tabindex=\"-1\">\n    <span v-if=\"!isActive && showClearBtn\" class=\"clear-btn\" tabindex=\"-1\"\n          :class=\"{'has-custom-btn': $slots && $slots.clearButton }\"\n          @click=\"clearTime\">\n      <slot name=\"clearButton\"><span class=\"char\">&times;</span></slot>\n    </span>\n    <span v-if=\"showDropdownBtn\" class=\"dropdown-btn\" tabindex=\"-1\"\n          :class=\"{'has-custom-btn': $slots && $slots.dropdownButton }\"\n          @click=\"setDropdownState(fixedDropdownButton ? !showDropdown : true, true)\"\n          @mousedown=\"keepFocusing\">\n      <slot name=\"dropdownButton\"><span class=\"char\">&dtrif;</span></slot>\n    </span>\n  </div>\n  <div class=\"custom-icon\" v-if=\"$slots && $slots.icon\"><slot name=\"icon\"></slot></div>\n  <div class=\"time-picker-overlay\" v-if=\"showDropdown\" @click=\"toggleActive\" tabindex=\"-1\"></div>\n  <div class=\"dropdown\" ref=\"dropdown\" v-show=\"showDropdown\" tabindex=\"-1\"\n       :class=\"[dropdownDirClass]\" :style=\"inputWidthStyle\"\n       @mouseup=\"keepFocusing\" @click.stop=\"\">\n    <div class=\"select-list\" :style=\"inputWidthStyle\" tabindex=\"-1\">\n      <!-- Common Keyboard Support: less event listeners -->\n      <template v-if=\"!advancedKeyboard\">\n        <template v-for=\"column in columnsSequence\">\n          <ul v-if=\"column === 'hour'\" :key=\"column\" class=\"hours\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"hourLabelText\"></li>\n            <template v-for=\"(hr, hIndex) in hours\">\n              <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabled('hour', hr))\"\n                  :key=\"hIndex\"\n                  :class=\"{active: hour === hr}\"\n                  :disabled=\"isDisabled('hour', hr)\"\n                  :data-key=\"hr\"\n                  v-text=\"hr\"\n                  @click=\"select('hour', hr)\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'minute'\" :key=\"column\" class=\"minutes\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"minuteLabelText\"></li>\n            <template v-for=\"(m, mIndex) in minutes\">\n              <li v-if=\"!opts.hideDisabledMinutes || (opts.hideDisabledMinutes && !isDisabled('minute', m))\"\n                  :key=\"mIndex\"\n                  :class=\"{active: minute === m}\"\n                  :disabled=\"isDisabled('minute', m)\"\n                  :data-key=\"m\"\n                  v-text=\"m\"\n                  @click=\"select('minute', m)\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'second'\" :key=\"column\" class=\"seconds\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"secondLabelText\"></li>\n            <template v-for=\"(s, sIndex) in seconds\">\n              <li v-if=\"!opts.hideDisabledSeconds || (opts.hideDisabledSeconds && !isDisabled('second', s))\"\n                  :key=\"sIndex\"\n                  :class=\"{active: second === s}\"\n                  :disabled=\"isDisabled('second', s)\"\n                  :data-key=\"s\"\n                  v-text=\"s\"\n                  @click=\"select('second', s)\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'apm'\" :key=\"column\" class=\"apms\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"apmLabelText\"></li>\n            <template v-for=\"(a, aIndex) in apms\">\n              <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabled('apm', a))\"\n                  :key=\"aIndex\"\n                  :class=\"{active: apm === a}\"\n                  :disabled=\"isDisabled('apm', a)\"\n                  :data-key=\"a\"\n                  v-text=\"apmDisplayText(a)\"\n                  @click=\"select('apm', a)\"></li>\n            </template>\n          </ul>\n        </template>\n      </template><!-- / Common Keyboard Support -->\n\n      <!--\n        Advanced Keyboard Support\n        Addeds hundreds of additional event lisenters\n      -->\n      <template v-if=\"advancedKeyboard\">\n        <template v-for=\"column in columnsSequence\">\n          <ul v-if=\"column === 'hour'\" :key=\"column\" class=\"hours\" tabindex=\"-1\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"hourLabelText\" tabindex=\"-1\"></li>\n            <template v-for=\"(hr, hIndex) in hours\">\n              <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabled('hour', hr))\"\n                  :key=\"hIndex\"\n                  :class=\"{active: hour === hr}\"\n                  :tabindex=\"isDisabled('hour', hr) ? -1 : tabindex\"\n                  :data-key=\"hr\"\n                  :disabled=\"isDisabled('hour', hr)\"\n                  v-text=\"hr\"\n                  @click=\"select('hour', hr)\"\n                  @keydown.tab=\"onTab('hour', hr, $event)\"\n                  @keydown.space.prevent=\"select('hour', hr)\"\n                  @keydown.enter.prevent=\"select('hour', hr)\"\n                  @keydown.up.prevent=\"prevItem('hour', hr)\"\n                  @keydown.down.prevent=\"nextItem('hour', hr)\"\n                  @keydown.left.prevent=\"toLeftColumn('hour')\"\n                  @keydown.right.prevent=\"toRightColumn('hour')\"\n                  @keydown.esc.exact=\"debounceBlur\"\n                  @blur=\"debounceBlur\"\n                  @focus=\"keepFocusing\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'minute'\" :key=\"column\" class=\"minutes\" tabindex=\"-1\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"minuteLabelText\" tabindex=\"-1\"></li>\n            <template v-for=\"(m, mIndex) in minutes\">\n              <li v-if=\"!opts.hideDisabledMinutes || (opts.hideDisabledMinutes && !isDisabled('minute', m))\"\n                  :key=\"mIndex\"\n                  :class=\"{active: minute === m}\"\n                  :tabindex=\"isDisabled('minute', m) ? -1 : tabindex\"\n                  :data-key=\"m\"\n                  :disabled=\"isDisabled('minute', m)\"\n                  v-text=\"m\"\n                  @click=\"select('minute', m)\"\n                  @keydown.tab=\"onTab('minute', m, $event)\"\n                  @keydown.space.prevent=\"select('minute', m)\"\n                  @keydown.enter.prevent=\"select('minute', m)\"\n                  @keydown.up.prevent=\"prevItem('minute', m)\"\n                  @keydown.down.prevent=\"nextItem('minute', m)\"\n                  @keydown.left.prevent=\"toLeftColumn('minute')\"\n                  @keydown.right.prevent=\"toRightColumn('minute')\"\n                  @keydown.esc.exact=\"debounceBlur\"\n                  @blur=\"debounceBlur\"\n                  @focus=\"keepFocusing\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'second'\" :key=\"column\" class=\"seconds\" tabindex=\"-1\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"secondLabelText\" tabindex=\"-1\"></li>\n            <template v-for=\"(s, sIndex) in seconds\">\n              <li v-if=\"!opts.hideDisabledSeconds || (opts.hideDisabledSeconds && !isDisabled('second', s))\"\n                  :key=\"sIndex\"\n                  :class=\"{active: second === s}\"\n                  :tabindex=\"isDisabled('second', s) ? -1 : tabindex\"\n                  :data-key=\"s\"\n                  :disabled=\"isDisabled('second', s)\"\n                  v-text=\"s\"\n                  @click=\"select('second', s)\"\n                  @keydown.tab=\"onTab('second', s, $event)\"\n                  @keydown.space.prevent=\"select('second', s)\"\n                  @keydown.enter.prevent=\"select('second', s)\"\n                  @keydown.up.prevent=\"prevItem('second', s)\"\n                  @keydown.down.prevent=\"nextItem('second', s)\"\n                  @keydown.left.prevent=\"toLeftColumn('second')\"\n                  @keydown.right.prevent=\"toRightColumn('second')\"\n                  @keydown.esc.exact=\"debounceBlur\"\n                  @blur=\"debounceBlur\"\n                  @focus=\"keepFocusing\"></li>\n            </template>\n          </ul>\n          <ul v-if=\"column === 'apm'\" :key=\"column\" class=\"apms\" tabindex=\"-1\" @scroll=\"keepFocusing\">\n            <li class=\"hint\" v-text=\"apmLabelText\" tabindex=\"-1\"></li>\n            <template v-for=\"(a, aIndex) in apms\">\n              <li v-if=\"!opts.hideDisabledHours || (opts.hideDisabledHours && !isDisabled('apm', a))\"\n                  :key=\"aIndex\"\n                  :class=\"{active: apm === a}\"\n                  :tabindex=\"isDisabled('apm', a) ? -1 : tabindex\"\n                  :data-key=\"a\"\n                  :disabled=\"isDisabled('apm', a)\"\n                  v-text=\"apmDisplayText(a)\"\n                  @click=\"select('apm', a)\"\n                  @keydown.tab=\"onTab('apm', a, $event)\"\n                  @keydown.space.prevent=\"select('apm', a)\"\n                  @keydown.enter.prevent=\"select('apm', a)\"\n                  @keydown.up.prevent=\"prevItem('apm', a)\"\n                  @keydown.down.prevent=\"nextItem('apm', a)\"\n                  @keydown.left.prevent=\"toLeftColumn('apm')\"\n                  @keydown.right.prevent=\"toRightColumn('apm')\"\n                  @keydown.esc.exact=\"debounceBlur\"\n                  @blur=\"debounceBlur\"\n                  @focus=\"keepFocusing\"></li>\n            </template>\n          </ul>\n        </template>\n      </template><!-- / Advanced Keyboard Support -->\n    </div>\n  </div>\n</span>\n</template>\n\n<style>\n.vue__time-picker {\n  display: inline-block;\n  position: relative;\n  font-size: 1em;\n  width: 10em;\n  font-family: sans-serif;\n  vertical-align: middle;\n}\n\n.vue__time-picker * {\n  box-sizing: border-box;\n}\n\n.vue__time-picker input.display-time {\n  border: 1px solid #d2d2d2;\n  width: 10em;\n  height: 2.2em;\n  padding: 0.3em 0.5em;\n  font-size: 1em;\n}\n\n.vue__time-picker input.has-custom-icon {\n  padding-left: 1.8em;\n}\n\n.vue__time-picker input.display-time.invalid:not(.skip-error-style) {\n  border-color: #cc0033;\n  outline-color: #cc0033;\n}\n\n.vue__time-picker input.display-time:disabled,\n.vue__time-picker input.display-time.disabled {\n  color: #d2d2d2;\n}\n\n.vue__time-picker .controls {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  z-index: 3;\n\n  display: flex;\n  flex-flow: row nowrap;\n  justify-content: flex-end;\n  align-items: stretch;\n\n  /* Prevent browser focusing on the controls layer */\n  pointer-events: none;\n}\n\n.vue__time-picker .controls > * {\n  cursor: pointer;\n  \n  width: auto;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n\n  padding: 0 0.35em;\n\n  color: #d2d2d2;\n  line-height: 100%;\n  font-style: normal;\n\n  /* Resume pointer-events on children components */\n  pointer-events: initial;\n\n  transition: color .2s, opacity .2s;\n}\n\n.vue__time-picker .controls > *:hover {\n  color: #797979;\n}\n\n.vue__time-picker .controls > *:focus,\n.vue__time-picker .controls > *:active {\n  outline: 0;\n}\n\n.vue__time-picker .controls .char {\n  font-size: 1.1em;\n  line-height: 100%;\n\n  /* Vertical align fixes for webkit browsers only */\n  -webkit-margin-before: -0.15em;\n}\n\n.vue__time-picker .custom-icon {\n  z-index: 2;\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  width: 1.8em;\n\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n\n  /* pass down mouse events to the <input> underneath */\n  pointer-events: none;\n}\n\n.vue__time-picker .custom-icon img,\n.vue__time-picker .custom-icon svg,\n.vue__time-picker .controls img,\n.vue__time-picker .controls svg {\n  display: inline-block;\n  vertical-align: middle;\n  margin: 0;\n  border: 0;\n  outline: 0;\n  max-width: 1em;\n  height: auto;\n}\n\n.vue__time-picker .time-picker-overlay {\n  z-index: 4;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.vue__time-picker .dropdown,\n.vue__time-picker-dropdown {\n  position: absolute;\n  z-index: 5;\n  top: calc(2.2em + 2px);\n  left: 0;\n  background: #fff;\n  box-shadow: 0 1px 6px rgba(0,0,0,0.15);\n  width: 10em;\n  height: 10em;\n  font-weight: normal;\n}\n\n/* Dropdown class when \"append-to-body\" is on */\n.vue__time-picker-dropdown {\n  position: fixed;\n  z-index: 100;\n}\n\n.vue__time-picker .dropdown.drop-up,\n.vue__time-picker-dropdown.drop-up {\n  top: auto;\n  bottom: calc(2.2em + 1px);\n}\n\n.vue__time-picker .dropdown .select-list,\n.vue__time-picker-dropdown .select-list {\n  width: 10em;\n  height: 10em;\n  overflow: hidden;\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: stretch;\n  justify-content: space-between;\n}\n\n.vue__time-picker .dropdown .select-list:focus,\n.vue__time-picker .dropdown .select-list:active,\n.vue__time-picker-dropdown .select-list:focus,\n.vue__time-picker-dropdown .select-list:active {\n  outline: 0;\n}\n\n.vue__time-picker .dropdown ul,\n.vue__time-picker-dropdown ul {\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  outline: 0;\n\n  flex: 1 1 0.00001px;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.vue__time-picker .dropdown ul.minutes,\n.vue__time-picker .dropdown ul.seconds,\n.vue__time-picker .dropdown ul.apms,\n.vue__time-picker-dropdown ul.minutes,\n.vue__time-picker-dropdown ul.seconds,\n.vue__time-picker-dropdown ul.apms {\n  border-left: 1px solid #fff;\n}\n\n.vue__time-picker .dropdown ul li,\n.vue__time-picker-dropdown ul li {\n  list-style: none;\n  text-align: center;\n  padding: 0.3em 0;\n  color: #161616;\n}\n\n.vue__time-picker .dropdown ul li:not(.hint):not([disabled]):hover,\n.vue__time-picker .dropdown ul li:not(.hint):not([disabled]):focus,\n.vue__time-picker-dropdown ul li:not(.hint):not([disabled]):hover,\n.vue__time-picker-dropdown ul li:not(.hint):not([disabled]):focus  {\n  background: rgba(0,0,0,.08);\n  color: #161616;\n  cursor: pointer;\n}\n\n.vue__time-picker .dropdown ul li:not([disabled]).active,\n.vue__time-picker .dropdown ul li:not([disabled]).active:hover,\n.vue__time-picker .dropdown ul li:not([disabled]).active:focus,\n.vue__time-picker-dropdown ul li:not([disabled]).active,\n.vue__time-picker-dropdown ul li:not([disabled]).active:hover,\n.vue__time-picker-dropdown ul li:not([disabled]).active:focus {\n  background: #41B883;\n  color: #fff;\n}\n\n.vue__time-picker .dropdown ul li[disabled],\n.vue__time-picker .dropdown ul li[disabled]:hover,\n.vue__time-picker-dropdown ul li[disabled],\n.vue__time-picker-dropdown ul li[disabled]:hover {\n  background: transparent;\n  opacity: 0.3;\n  cursor: not-allowed;\n}\n\n.vue__time-picker .dropdown .hint,\n.vue__time-picker-dropdown .hint {\n  color: #a5a5a5;\n  cursor: default;\n  font-size: 0.8em;\n}\n</style>\n"],"sourceRoot":"node_modules/vue2-timepicker/src"}]}